{
    "info": {
        "_postman_id": "ce0bc2a9-2ef0-4882-bbfa-10068e4a2e57",
        "name": "CTK-Test_Scenario-4.0.0",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "N1",
            "item": [
                {
                    "name": "/TestScenario",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "0d2bf6f5-4df6-4507-8216-2b31cc8943f6",
                                "exec": [
                                    "var jsonData = pm.response.json();",
                                    "",
                                    "if (Array.isArray(jsonData)) { ",
                                    "  ",
                                    "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                                    "  ",
                                    "",
                                    "}",
                                    "",
                                    "pm.test(\"Status code is 201\", function () {",
                                    "  pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "var instance = pm.response.json();",
                                    "var requiredAttributes = ['testScenarioDefinition', 'description', 'href', 'id', 'testScenarioDefinition', 'version'];",
                                    "",
                                    "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                                    "",
                                    "",
                                    "",
                                    "pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });",
                                    "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });",
                                    "",
                                    "pm.globals.set('DESCRIPTIONTS01', instance['description']);",
                                    "pm.globals.set('HREFTS01', instance['href']);",
                                    "pm.globals.set('IDTS01', instance['id']);",
                                    "pm.globals.set('VERSIONTS01', instance['version']);",
                                    "",
                                    "pm.test('Body includes value held on description', function () {",
                                    "  pm.expect(pm.response.text()).to.include(instance['description']);",
                                    "});",
                                    "pm.test('Body includes value held on href', function () {",
                                    "  pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "});",
                                    "pm.test('Body includes value held on id', function () {",
                                    "  pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "});",
                                    "pm.test('Body includes value held on version', function () {",
                                    "  pm.expect(pm.response.text()).to.include(instance['version']);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"description\": \"Sample test scenario\",\n  \"testScenarioDefinition\": {},\n  \"version\": \"1.2.3\"\n}"
                        },
                        "url": "{{Test_Scenario}}testScenario",
                        "description": "This operation creates a TestScenario"
                    },
                    "response": []
                },
                {
                    "name": "/TestScenario",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "94a64b0c-7463-4346-81b8-f9a25cea09c1",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "  ",
                                    "  ",
                                    "  ",
                                    "var jsonData = pm.response.json();",
                                    "  ",
                                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                                    "    jsonData.forEach(function (instance, index) {",
                                    "      ",
                                    "        var requiredAttributes = ['testScenarioDefinition', 'description', 'href', 'id', 'testScenarioDefinition', 'version'];",
                                    "      ",
                                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                                    "      ",
                                    "      ",
                                    "      ",
                                    "        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });",
                                    "      ",
                                    "        pm.test('Body includes value held on description', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['description']);",
                                    "        });",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on version', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['version']);",
                                    "        });",
                                    "        // Individualized tests",
                                    "        if (instance.id == pm.globals.get(\"IDTS01\")) {",
                                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTS01');});",
                                    "            pm.test('href is ' + pm.globals.get(\"HREFTS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTS01');});",
                                    "            pm.test('id is ' + pm.globals.get(\"IDTS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTS01');});",
                                    "            pm.test('version is ' + pm.globals.get(\"VERSIONTS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTS01');});",
                                    "        }",
                                    "        if (instance.id == pm.globals.get(\"IDTS02\")) {",
                                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTS02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTS02');});",
                                    "            pm.test('href is ' + pm.globals.get(\"HREFTS02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTS02');});",
                                    "            pm.test('id is ' + pm.globals.get(\"IDTS02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTS02');});",
                                    "            pm.test('version is ' + pm.globals.get(\"VERSIONTS02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTS02');});",
                                    "        }  ",
                                    "    });",
                                    "  }",
                                    "  else {",
                                    "    var instance = pm.response.json();",
                                    "    var requiredAttributes = ['testScenarioDefinition', 'description', 'href', 'id', 'testScenarioDefinition', 'version'];",
                                    "      ",
                                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                                    "      ",
                                    "      ",
                                    "      ",
                                    "        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });",
                                    "      ",
                                    "        pm.test('Body includes value held on description', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['description']);",
                                    "        });",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on version', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['version']);",
                                    "        });",
                                    "        // Individualized tests",
                                    "        if (instance.id == pm.globals.get(\"IDTS01\")) {",
                                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTS01');});",
                                    "            pm.test('href is ' + pm.globals.get(\"HREFTS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTS01');});",
                                    "            pm.test('id is ' + pm.globals.get(\"IDTS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTS01');});",
                                    "            pm.test('version is ' + pm.globals.get(\"VERSIONTS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTS01');});",
                                    "        }",
                                    "        if (instance.id == pm.globals.get(\"IDTS02\")) {",
                                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTS02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTS02');});",
                                    "            pm.test('href is ' + pm.globals.get(\"HREFTS02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTS02');});",
                                    "            pm.test('id is ' + pm.globals.get(\"IDTS02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTS02');});",
                                    "            pm.test('version is ' + pm.globals.get(\"VERSIONTS02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTS02');});",
                                    "        }",
                                    "   ",
                                    "  }",
                                    "  ",
                                    "  "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": "{{Test_Scenario}}testScenario",
                        "description": "This operation search for the created TestScenario"
                    },
                    "response": []
                },
                {
                    "name": "/TestScenario/{{IDTS01}}",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "6a9d8aa8-27a0-4427-99e3-39df189ec1df",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "  ",
                                    "  ",
                                    "  ",
                                    "var jsonData = pm.response.json();",
                                    "  ",
                                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                                    "    jsonData.forEach(function (instance, index) {",
                                    "      ",
                                    "        var requiredAttributes = ['testScenarioDefinition', 'description', 'href', 'id', 'testScenarioDefinition', 'version'];",
                                    "      ",
                                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                                    "      ",
                                    "      ",
                                    "      ",
                                    "        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });",
                                    "      ",
                                    "        pm.test('Body includes value held on description', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['description']);",
                                    "        });",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on version', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['version']);",
                                    "        });",
                                    "        // Individualized tests",
                                    "        if (instance.id == pm.globals.get(\"IDTS01\")) {",
                                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTS01');});",
                                    "            pm.test('href is ' + pm.globals.get(\"HREFTS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTS01');});",
                                    "            pm.test('id is ' + pm.globals.get(\"IDTS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTS01');});",
                                    "            pm.test('version is ' + pm.globals.get(\"VERSIONTS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTS01');});",
                                    "        }",
                                    "        if (instance.id == pm.globals.get(\"IDTS02\")) {",
                                    "            pm.test('IDTS02 not expected on this test', function () {",
                                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                                    "            });",
                                    "        }",
                                    "          ",
                                    "    });",
                                    "  }",
                                    "  else {",
                                    "    var instance = pm.response.json();",
                                    "    var requiredAttributes = ['testScenarioDefinition', 'description', 'href', 'id', 'testScenarioDefinition', 'version'];",
                                    "      ",
                                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                                    "      ",
                                    "      ",
                                    "      ",
                                    "        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });",
                                    "      ",
                                    "        pm.test('Body includes value held on description', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['description']);",
                                    "        });",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on version', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['version']);",
                                    "        });",
                                    "        // Individualized tests",
                                    "        if (instance.id == pm.globals.get(\"IDTS01\")) {",
                                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTS01');});",
                                    "            pm.test('href is ' + pm.globals.get(\"HREFTS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTS01');});",
                                    "            pm.test('id is ' + pm.globals.get(\"IDTS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTS01');});",
                                    "            pm.test('version is ' + pm.globals.get(\"VERSIONTS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTS01');});",
                                    "        }",
                                    "        if (instance.id == pm.globals.get(\"IDTS02\")) {",
                                    "            pm.test('IDTS02 not expected on this test', function () {",
                                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                                    "            });",
                                    "        }",
                                    "",
                                    "        ",
                                    "   ",
                                    "}",
                                    "  ",
                                    "  "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": "{{Test_Scenario}}testScenario/{{IDTS01}}",
                        "description": "This operation search for one of the created TestScenario"
                    },
                    "response": []
                }
            ],
            "_postman_isSubFolder": true
        },
        {
            "name": "N2",
            "item": [
                {
                    "name": "/TestScenario?fields=description",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "ce8cc5a5-f4bc-405d-a9e1-735a191befff",
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"description\": \"Sample test scenario\",\n  \"testScenarioDefinition\": {},\n  \"version\": \"1.2.3\"\n}"
                        },
                        "url": "{{Test_Scenario}}testScenario?fields=description",
                        "description": "This operation filter a TestScenario"
                    },
                    "response": []
                },
                {
                    "name": "/TestScenario?description={{DESCRIPTIONTS01}}",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "3e4846ce-c4c3-4001-8cab-e77a37d05647",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "  ",
                                    "  ",
                                    "  ",
                                    "var jsonData = pm.response.json();",
                                    "  ",
                                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                                    "    jsonData.forEach(function (instance, index) {",
                                    "      ",
                                    "        var requiredAttributes = ['testScenarioDefinition', 'description', 'href', 'id', 'testScenarioDefinition', 'version'];",
                                    "      ",
                                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                                    "      ",
                                    "      ",
                                    "      ",
                                    "        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });",
                                    "      ",
                                    "        pm.test('Body includes value held on description', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['description']);",
                                    "        });",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on version', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['version']);",
                                    "        });",
                                    "        // Individualized tests",
                                    "        if (instance.id == pm.globals.get(\"IDTS01\")) {",
                                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTS01');});",
                                    "            pm.test('href is ' + pm.globals.get(\"HREFTS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTS01');});",
                                    "            pm.test('id is ' + pm.globals.get(\"IDTS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTS01');});",
                                    "            pm.test('version is ' + pm.globals.get(\"VERSIONTS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTS01');});",
                                    "        }",
                                    "        if (instance.id == pm.globals.get(\"IDTS02\")) {",
                                    "            pm.test('IDTS02 not expected on this test', function () {",
                                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                                    "            });",
                                    "        }",
                                    "          ",
                                    "    });",
                                    "  }",
                                    "  else {",
                                    "    var instance = pm.response.json();",
                                    "    var requiredAttributes = ['testScenarioDefinition', 'description', 'href', 'id', 'testScenarioDefinition', 'version'];",
                                    "      ",
                                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                                    "      ",
                                    "      ",
                                    "      ",
                                    "        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });",
                                    "      ",
                                    "        pm.test('Body includes value held on description', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['description']);",
                                    "        });",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on version', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['version']);",
                                    "        });",
                                    "        // Individualized tests",
                                    "        if (instance.id == pm.globals.get(\"IDTS01\")) {",
                                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTS01');});",
                                    "            pm.test('href is ' + pm.globals.get(\"HREFTS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTS01');});",
                                    "            pm.test('id is ' + pm.globals.get(\"IDTS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTS01');});",
                                    "            pm.test('version is ' + pm.globals.get(\"VERSIONTS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTS01');});",
                                    "        }",
                                    "        if (instance.id == pm.globals.get(\"IDTS02\")) {",
                                    "            pm.test('IDTS02 not expected on this test', function () {",
                                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                                    "            });",
                                    "        }",
                                    "",
                                    "        ",
                                    "   ",
                                    "}",
                                    "  ",
                                    "  "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"description\": \"Sample test scenario\",\n  \"testScenarioDefinition\": {},\n  \"version\": \"1.2.3\"\n}"
                        },
                        "url": "{{Test_Scenario}}testScenario?description={{DESCRIPTIONTS01}}",
                        "description": "This operation filter a TestScenario"
                    },
                    "response": []
                },
                {
                    "name": "/TestScenario?fields=id",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "6aaf179a-c782-49cd-88b8-43a715a8a84d",
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"description\": \"Sample test scenario\",\n  \"testScenarioDefinition\": {},\n  \"version\": \"1.2.3\"\n}"
                        },
                        "url": "{{Test_Scenario}}testScenario?fields=id",
                        "description": "This operation filter a TestScenario"
                    },
                    "response": []
                },
                {
                    "name": "/TestScenario?id={{IDTS01}}",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "1e5ddea7-6803-40dc-ab20-851d8587a17c",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "  ",
                                    "  ",
                                    "  ",
                                    "var jsonData = pm.response.json();",
                                    "  ",
                                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                                    "    jsonData.forEach(function (instance, index) {",
                                    "      ",
                                    "        var requiredAttributes = ['testScenarioDefinition', 'description', 'href', 'id', 'testScenarioDefinition', 'version'];",
                                    "      ",
                                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                                    "      ",
                                    "      ",
                                    "      ",
                                    "        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });",
                                    "      ",
                                    "        pm.test('Body includes value held on description', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['description']);",
                                    "        });",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on version', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['version']);",
                                    "        });",
                                    "        // Individualized tests",
                                    "        if (instance.id == pm.globals.get(\"IDTS01\")) {",
                                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTS01');});",
                                    "            pm.test('href is ' + pm.globals.get(\"HREFTS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTS01');});",
                                    "            pm.test('id is ' + pm.globals.get(\"IDTS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTS01');});",
                                    "            pm.test('version is ' + pm.globals.get(\"VERSIONTS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTS01');});",
                                    "        }",
                                    "        if (instance.id == pm.globals.get(\"IDTS02\")) {",
                                    "            pm.test('IDTS02 not expected on this test', function () {",
                                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                                    "            });",
                                    "        }",
                                    "          ",
                                    "    });",
                                    "  }",
                                    "  else {",
                                    "    var instance = pm.response.json();",
                                    "    var requiredAttributes = ['testScenarioDefinition', 'description', 'href', 'id', 'testScenarioDefinition', 'version'];",
                                    "      ",
                                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                                    "      ",
                                    "      ",
                                    "      ",
                                    "        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });",
                                    "      ",
                                    "        pm.test('Body includes value held on description', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['description']);",
                                    "        });",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on version', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['version']);",
                                    "        });",
                                    "        // Individualized tests",
                                    "        if (instance.id == pm.globals.get(\"IDTS01\")) {",
                                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTS01');});",
                                    "            pm.test('href is ' + pm.globals.get(\"HREFTS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTS01');});",
                                    "            pm.test('id is ' + pm.globals.get(\"IDTS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTS01');});",
                                    "            pm.test('version is ' + pm.globals.get(\"VERSIONTS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTS01');});",
                                    "        }",
                                    "        if (instance.id == pm.globals.get(\"IDTS02\")) {",
                                    "            pm.test('IDTS02 not expected on this test', function () {",
                                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                                    "            });",
                                    "        }",
                                    "",
                                    "        ",
                                    "   ",
                                    "}",
                                    "  ",
                                    "  "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"description\": \"Sample test scenario\",\n  \"testScenarioDefinition\": {},\n  \"version\": \"1.2.3\"\n}"
                        },
                        "url": "{{Test_Scenario}}testScenario?id={{IDTS01}}",
                        "description": "This operation filter a TestScenario"
                    },
                    "response": []
                },
                {
                    "name": "/TestScenario?fields=version",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "e6e9fe6d-7722-4e42-85ea-3d4d6b0a5319",
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"description\": \"Sample test scenario\",\n  \"testScenarioDefinition\": {},\n  \"version\": \"1.2.3\"\n}"
                        },
                        "url": "{{Test_Scenario}}testScenario?fields=version",
                        "description": "This operation filter a TestScenario"
                    },
                    "response": []
                },
                {
                    "name": "/TestScenario?version={{VERSIONTS01}}",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "eb114ee3-0906-4474-a86c-992a88029f78",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "  ",
                                    "  ",
                                    "  ",
                                    "var jsonData = pm.response.json();",
                                    "  ",
                                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                                    "    jsonData.forEach(function (instance, index) {",
                                    "      ",
                                    "        var requiredAttributes = ['testScenarioDefinition', 'description', 'href', 'id', 'testScenarioDefinition', 'version'];",
                                    "      ",
                                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                                    "      ",
                                    "      ",
                                    "      ",
                                    "        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });",
                                    "      ",
                                    "        pm.test('Body includes value held on description', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['description']);",
                                    "        });",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on version', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['version']);",
                                    "        });",
                                    "        // Individualized tests",
                                    "        if (instance.id == pm.globals.get(\"IDTS01\")) {",
                                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTS01');});",
                                    "            pm.test('href is ' + pm.globals.get(\"HREFTS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTS01');});",
                                    "            pm.test('id is ' + pm.globals.get(\"IDTS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTS01');});",
                                    "            pm.test('version is ' + pm.globals.get(\"VERSIONTS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTS01');});",
                                    "        }",
                                    "        if (instance.id == pm.globals.get(\"IDTS02\")) {",
                                    "            pm.test('IDTS02 not expected on this test', function () {",
                                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                                    "            });",
                                    "        }",
                                    "          ",
                                    "    });",
                                    "  }",
                                    "  else {",
                                    "    var instance = pm.response.json();",
                                    "    var requiredAttributes = ['testScenarioDefinition', 'description', 'href', 'id', 'testScenarioDefinition', 'version'];",
                                    "      ",
                                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                                    "      ",
                                    "      ",
                                    "      ",
                                    "        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });",
                                    "      ",
                                    "        pm.test('Body includes value held on description', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['description']);",
                                    "        });",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on version', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['version']);",
                                    "        });",
                                    "        // Individualized tests",
                                    "        if (instance.id == pm.globals.get(\"IDTS01\")) {",
                                    "            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTS01');});",
                                    "            pm.test('href is ' + pm.globals.get(\"HREFTS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTS01');});",
                                    "            pm.test('id is ' + pm.globals.get(\"IDTS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTS01');});",
                                    "            pm.test('version is ' + pm.globals.get(\"VERSIONTS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTS01');});",
                                    "        }",
                                    "        if (instance.id == pm.globals.get(\"IDTS02\")) {",
                                    "            pm.test('IDTS02 not expected on this test', function () {",
                                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                                    "            });",
                                    "        }",
                                    "",
                                    "        ",
                                    "   ",
                                    "}",
                                    "  ",
                                    "  "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"description\": \"Sample test scenario\",\n  \"testScenarioDefinition\": {},\n  \"version\": \"1.2.3\"\n}"
                        },
                        "url": "{{Test_Scenario}}testScenario?version={{VERSIONTS01}}",
                        "description": "This operation filter a TestScenario"
                    },
                    "response": []
                }
            ],
            "_postman_isSubFolder": true
        },
        {
            "name": "E1",
            "item": [
                {
                    "name": "/TestScenario/404ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "d737e618-44b5-446e-bdac-d2c32ab259ce",
                                "exec": [
                                    "pm.test(\"Status code is 404\", function () {",
                                    "    pm.response.to.have.status(404);",
                                    "});",
                                    "",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": "{{Test_Scenario}}TestScenario/ff35f94b-c745-4e37-89a7-4f4a6c98df31",
                        "description": "This operation search for one of the created TestScenario"
                    },
                    "response": []
                }
            ],
            "_postman_isSubFolder": true
        }
    ]
}